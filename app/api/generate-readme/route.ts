import { NextResponse } from 'next/server';
import clientPromise from '../../../lib/mongodb';

export async function POST(request: Request) {
  const data = await request.json();
  const { username } = data;

  try {
    // Fetch GitHub data
    const githubResponse = await fetch(`https://api.github.com/users/${username}`);
    if (!githubResponse.ok) {
      if (githubResponse.status === 404) {
        return NextResponse.json({ error: 'User not found' }, { status: 404 });
      }
      throw new Error('Failed to fetch user data from GitHub');
    }
    const userData = await githubResponse.json();

    // Fetch user's repositories
    const reposResponse = await fetch(`https://api.github.com/users/${username}/repos?sort=updated&per_page=5`);
    if (!reposResponse.ok) {
      throw new Error('Failed to fetch user repositories from GitHub');
    }
    const repos = await reposResponse.json();

    // Prepare repository list
    const repoList = repos.map((repo: Repository) => `- [${repo.name}](${repo.html_url}): ${repo.description}`).join('\n');

    // Prepare the prompt for Perplexity AI
    const prompt = `Generate a funny and engaging GitHub profile README for a user with the following information:

User Data: ${JSON.stringify(userData)}
Repositories:
${repoList}

Create a README with the following sections, but feel free to change the headings to something more creative, funny, and tailored to the user's profile:

1. A welcoming title that incorporates the user's name and a fun description of their coding persona.
2. A subtitle with 2-3 playful descriptors of the user's skills or interests.
3. A humorous greeting or introduction.
4. A section listing the user's repositories (use the provided repository list).
5. A section for GitHub stats, presented in a fun way.
6. A section with 4 funny, personalized "achievements" or facts about the user, based on their profile and repositories.
7. A section for social links or ways to contact the user.
8. A humorous call-to-action encouraging people to check out the user's projects.
9. A funny sign-off or closing statement.
10. A note mentioning that the README was generated by an AI, with a humorous disclaimer.

Make each section heading unique, funny, and related to coding, technology, or the user's specific interests if apparent from their profile. The overall tone should be witty, engaging, and tailored to the user's GitHub profile and repositories. Be creative with wordplay, puns, and tech humor!`;

    // Call Perplexity AI API
    const perplexityResponse = await fetch('https://api.perplexity.ai/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.PERPLEXITY_API_KEY}`
      },
      body: JSON.stringify({
        model: 'llama-3.1-8b-instruct',
        messages: [{ role: 'user', content: prompt }]
      })
    });

    if (!perplexityResponse.ok) {
      throw new Error('Failed to generate README from Perplexity AI');
    }

    const perplexityResult = await perplexityResponse.json();
    let generatedReadme = perplexityResult.choices[0].message.content;

    // Get the website URL from environment variable
    const websiteUrl = process.env.NEXT_PUBLIC_BASE_URL || 'https://your-website-url.com';

    // Add the custom line at the end of the README
    generatedReadme += `\n\n---\n\nWant your own funny README? Check out [ReadMe ReadYou](${websiteUrl})!`;

    // Save the generated README to MongoDB
    const client = await clientPromise;
    const db = client.db("github_readmes");
    const readmesCollection = db.collection("readmes");
    await readmesCollection.insertOne({
      username,
      content: generatedReadme,
      createdAt: new Date()
    });

    return NextResponse.json({ readme: generatedReadme });
  } catch (error: unknown) {
    console.error('Error in POST function:', error);
    if (error instanceof Error) {
      return NextResponse.json({ error: error.message }, { status: 500 });
    }
    return NextResponse.json({ error: 'An unknown error occurred' }, { status: 500 });
  }
}

interface Repository {
  name: string;
  html_url: string;
  description: string | null;
}